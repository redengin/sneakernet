openapi: '3.0.3'
info:
  title: Sneakernet Catalog
  description: REST API
  version: 0.0.0

servers:
  - url: http://192.168.4.1/api   # android needs absolute IP
  - url: https://192.168.4.1/api  # android needs absolute IP

security:
  - {} # allow unsecured access
  # TODO support admin access


paths:
  /catalog/{path}/:
    parameters:
      - name: path
        in: path
        required: true    # FIXME not required for root
        schema: { type: string }
    get:
      description: get folder content
      responses:
        "200" :
          description: OK
          content:
            application/json:
              schema: { '$ref': '#/components/schemas/Folder' }
        "404" : { description: "folder Not Found" }
        "429" : { description: "Client should try again" }
    put:
      description: create subfolder
      responses:
        "200" : { description: OK }
        "403" : { description: FAIL }
        "401" : { $ref: '#/components/responses/adminCurated' }
    delete:
      description: remove empty subfolder
      responses:
        "200" : { description: OK }
        "403" : { description: "folder not empty" }
        "404" : { description: "folder Not Found" }
        "401" : { $ref: '#/components/responses/adminCurated' }


  /catalog/{path}/{file}:
    parameters:
      - name: path
        in: path
        required: true 
        schema: { type: string }
      - name: file
        in: path
        required: true
        schema: { type: string }
      - name: Content-Length
        required: true
        in: header
        schema: { type: integer }
    put:
      parameters:
        - in: header
          name: Content-Length
          required: true
          schema: { type: integer }
        - in: header
          name: X-timestamp
          required: true
          schema: { '$ref': '#components/schemas/timestamp' }
      description: add a file
      responses:
        "200" : { description: OK }
        "403" : { description: "required headers not provided" }
        "404" : { description: "Parent folder Not Found" }
        "401": { $ref: '#/components/responses/adminCurated' }
        "429": { description: "client should try again" }
    get:
      description: download file
      responses:
        "200" :
          description: sending file
          content: { application/octet-stream: {} }
        "404" : { description: "File Not Found" }
        "429": { description: "client should try again" }
    delete:
      description: remove a file
      responses:
        "200": { description: "file removed" }
        "404" : { description: "File Not Found" }
        "401": { $ref: '#/components/responses/adminCurated' }

  /catalog/{path}/{file}?title={title}:
    parameters:
      - name: path
        in: path
        required: true 
        schema: { type: string }
      - name: file
        in: path
        required: true
        schema: { type: string }
    put:
      description: set the title for the file
      parameters:
        - name: title
          in: query
          required: true
          schema: { type: string }
      responses:
        "200" : { description: "title changed" }
        "404" : { description: "File Not Found" }
        "401" : { $ref: '#/components/responses/adminCurated' }

  /catalog/{path}/{file}?icon:
    parameters:
      - name: path
        in: path
        required: true 
        schema: { type: string }
      - name: file
        in: path
        required: true
        schema: { type: string }
    put:
      description: upload a new icon
      requestBody: 
        content:
          application/octet-stream: {}
      responses:
        "200" : { description: "OK" }
        "404" : { description: "FAIL" }
        "429" : { description: "client should try again" }
        "401" : { $ref: '#/components/responses/adminCurated' }
    get:
      description: download icon
      responses:
        "200" :
          description: "sending icon"
          content: { application/octet-stream: {} }
        "404" : { description: "FAIL" }
        "429" : { description: "client should try again" }
        "401" : { $ref: '#/components/responses/adminCurated' }
        


components:

  responses:
    adminCurated:
      description: Only admin can modify contents


  schemas:
    Folder:
      type: object
      properties:
        locked:
          type: boolean
          description: folder contents are locked (only admin can modify)
        entries:
          type: object
          $ref: '#/components/schemas/Entry'

    Entry:
      type: object
      properties:
        isFolder: { type: boolean }
      discriminator:
        propertyName: isFolder
        mapping:
          true: '#/components/schemas/FolderEntry'
          false: '#/components/schemas/FileEntry'

    FolderEntry:
      allOf:
        - $ref: '#components/schemas/Entry'
        - type: object

    FileEntry:
      allOf:
        - $ref: '#components/schemas/Entry'
        - type: object
          required:
            - timestamp
            - size
          properties:
            timestamp: { type: string, description: "ISO 8601 Z (aka UTC time)" }
            size: { type: integer, description: "size in bytes" }
            title: { type: string }
            hasIcon: { type: boolean }

    timestamp:
      type: string
      description: "ISO 8601 Z"
