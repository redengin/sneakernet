openapi: 3.1.0
info:
  title: SneakerNet
  description: REST API
  version: 1.0.0

servers:
  - url: http://192.168.4.1/api
    description: user interface

paths:
  /catalog.contents:
    get:
      summary: provides a current listing of all folders/files
      description: used for synchronization
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: key is the path to the folder/file
                additionalProperties:
                  $ref: "#/components/schemas/CatalogEntry"
                  description: each Entry is either a folder or file
        "429": { description: "Client should try again" }

  /catalog/{folder}/:
    summary: access to a catalog folder
    parameters:
      - name: folder
        in: path
        schema: { type: string }
        required: true
        description: an empty value will access the catalog root
    get:
      summary: list folder content (subfolders and files)
      responses:
        "200":
          description: OK
          content:
            application/json:
              { schema: { $ref: "#/components/schemas/CatalogEntry" } }
        "429": { description: "Client should try again" }
        "404": { description: "Folder Not Found" }
    put:
      summary: create subfolder
      responses:
        "200": { description: "OK" }
        "404": { description: "Parent Folder Not Found" }
        "429": { description: "Client should try again" }
    delete:
      summary: remove subfolder
      responses:
        "200": { description: "OK" }
        "404": { description: "Folder Not Found" }
        "409": { description: "Folder Not Empty" }
        "429": { description: "Client should try again" }

  /catalog/{folder}/{file}:
    summary: access to catalog content (files)
    parameters:
      - name: folder
        in: path
        schema: { type: string }
        required: true
      - name: file
        in: path
        schema: { type: string }
        required: true
    get:
      summary: download the file
      responses:
        "200":
          description: "OK"
          content: { application/octet-stream: {} }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }
    put:
      summary: add a file to the catalog
      parameters:
        - in: header
          name: Content-Length
          required: true
          schema: { type: integer, description: "size in bytes" }
        - in: query
          name: title
          required: false
          schema: { type: string, description: "pretty title for file" }
      requestBody:
        content: { application/octet-stream: {} }
      responses:
        "200": { description: "OK" }
        "412": { description: "Content-Length not provided" }
        "413": { description: "Payload Too Large" }
        "429": { description: "Client should try again" }
    delete:
      summary: remove the file
      responses:
        "200": { description: "OK" }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }

  /catalog.title/{folder}/{file}:
    parameters:
      - name: folder
        in: path
        schema: { type: string }
        required: true
      - name: file
        in: path
        schema: { type: string }
        required: true
    put:
      summary: set the title for the file
      parameters:
        - in: query
          name: title
          schema: { type: string }
      responses:
        "200": { description: "OK" }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }
    delete:
      summary: remove the title for the file
      responses:
        "200": { description: "OK" }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }

  /catalog.icon/{folder}/:
    parameters:
      - name: folder
        in: path
        schema: { type: string }
        required: true
    put:
      summary: set the icon for the folder
      parameters:
        - in: header
          name: Content-Length
          required: true
          schema: { type: integer, description: "size in bytes" }
      requestBody:
        content: { image/*: {} }
      responses:
        "200": { description: "OK" }
        "404": { description: "Folder Not Found" }
        "429": { description: "Client should try again" }
    delete:
      summary: remove the icon for the folder
      responses:
        "200": { description: "OK" }
        "404": { description: "Folder Not Found" }
        "429": { description: "Client should try again" }

  /catalog.icon/{folder}/{file}:
    parameters:
      - name: folder
        in: path
        schema: { type: string }
        required: true
      - name: file
        in: path
        schema: { type: string }
        required: true
    put:
      summary: set the icon for the file
      parameters:
        - in: header
          name: Content-Length
          required: true
          schema: { type: integer, description: "size in bytes" }
      requestBody:
        content: { image/*: {} }
      responses:
        "200": { description: "OK" }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }
    delete:
      summary: remove the icon for the file
      responses:
        "200": { description: "OK" }
        "404": { description: "File Not Found" }
        "429": { description: "Client should try again" }

  /firmware:
    get:
      summary: firmware info
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    { type: string, description: "semantic firmware version" }
                  hardware:
                    type: string
                    enum: ["ESP32"]
                    description: "hardware type"
        "429": { description: "Client should try again" }
    put:
      summary: update firmware
      description: "new firmware must be new revision than current"
      requestBody: { content: { application/octet-stream: {} } }
      responses:
        "200": { description: "OK, rebooting..." }
        "403": { description: "update rejected" }
        "429": { description: "Client should try again" }

components:
  schemas:
    CatalogEntry:
      description: key is the name of the file or folder
      oneOf:
        - $ref: "#/components/schemas/FolderEntry"
        - $ref: "#/components/schemas/FileEntry"
      discriminator:
        propertyName: isFolder
        mapping:
          true: "#/components/schemas/FolderEntry"
          false: "#/components/schemas/FileEntry"

    FolderEntry:
      type: object
      required:
        - isFolder
      properties:
        isFolder: { type: boolean }
        hasIcon: { type: boolean, "true if folder has a custom icon" }

    FileEntry:
      type: object
      required:
        - isFolder
        - size
        - timestamp
      properties:
        isFolder: { type: boolean }
        size: { type: integer, description: "size of the file in bytes" }
        timestamp: { $ref: "#/components/schemas/timestamp" }
        title: { type: string }
        hasIcon: { type: boolean, "true if file has a custom icon" }

    timestamp:
      type: string
      description: "ISO 8601 Z"
      example: "2025-07-01T15:55:00Z "
