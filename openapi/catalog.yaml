# for visualization use vscode:Preview Swagger
openapi: 3.1.0
info:
  title: Free Library
  description: Catalog REST API
  version: 0.0.0

# no security required
security:
  - {}  # allow unsecured access
  # TODO optional use of admin credentials
  #- {
  #   type: apiKey,
  #   name: api_key,
  #   in: header
  # }

servers:
  - url: http://192.168.4.1/api # android needs absolute IP

paths:
  /catalog/{path}/:
    parameters:
      - name: path
        in: path
        required: false
        schema: { type: string }
    get:
      summary: listing of digital content
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  locked:
                    type: boolean
                    description: folder contents are locked (only admin can modify)
                  subfolders:
                    type: array
                    items:
                      type: string
                  files:
                    type: array
                    items:
                      type: object
                      required: [name, size, timestamp]
                      properties:
                        name: { type: string }
                        size: { type: integer, description: "size in bytes" }
                        timestamp: { type: string, description: "ISO 8601 Z (aka UTC time)" }
                        title: { type: string }
                        hasIcon: { type: boolean }
        "404": { description: Folder Not Found }
        "429": { description: Client should try again }

  /catalog/{path}/{file}:
    parameters:
      - name: path
        in: path
        required: false
        schema: { type: string }
      - name: file
        in: path
        required: true
        schema: { type: string }
    get:
      summary: download the file
      responses:
        "200":
          description: server is sending the file
          headers:
            X-FileTimeStamp:
              description: timestamp of file [ISO 8601 Z (aka UTC time)]
              schema:
                type: string
          content: { application/octet-stream: {} }
        "404": { description: File Not Found }
        "429": { description: Client should try again }
    put:
      summary: add a file to the catalog
      parameters:
        - name: Content-Length
          in: header
          required: true
          schema: { type: integer, description: "size of file in bytes" }
        - name: X-FileTimeStamp
          in: header
          required: true
          schema: { type: string, description: "ISO 8601 Z (aka UTC time)" }
        - name: X-FileTitle
          required: false
          in: header
          schema: { type: string }
      requestBody:
        content:
          application/octet-stream: {}
      responses:
        "200": { description: "file accepted" }
        "411": { description: "Content-Length required" }
        "400": { description: "parent folder doesn't exist" }
        "401": { $ref: '#/components/responses/adminCurated' }
        "429": { description: "client should try again" }

    delete:
      summary: remove the file from the catalog
      responses:
        "200": { description: "file removed" }
        "404": { description: "file not found" }
        "401": { $ref: '#/components/responses/adminCurated' }
        "429": { description: "client should try again" }

  /catalog/{path}/{file}?title={title}:
    put:
      description: set the title for the file
      parameters:
        - name: title
          in: query
          required: true
          schema: { type: string }
      responses:
        "200": { description: "title changed" }
        "404": { description: "file not found" }
        "401": { $ref: '#/components/responses/adminCurated' }
        "429": { description: "client should try again" }

  /catalog/{path}/{file}?icon:
    get:
      description: get the icon for the file
      responses:
        "200": { description: "server is sending the icon", content: { application/octet-stream: {} } }
        "404": { description: "file not found" }
        "429": { description: "client should try again" }
    put:
      description: set the icon for the file
      parameters:
        - name: Content-Length
          in: header
          required: true
          description: size of icon in bytes
          schema: { type: integer }
      requestBody:
        content: { application/octet-stream: {} }
      responses:
        "200": { description: "icon has been updated" }
        "404": { description: "file not found" }
        "411": { description: "Content-Length required" }
        "401": { $ref: '#/components/responses/adminCurated' }
        "429": { description: "client should try again" }




components:
  responses:
    adminCurated:
      description: Only admin can modify contents